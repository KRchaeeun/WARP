"""
Django settings for movie_pjt project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ki!$qvo82vwu+cr@3w==^p@jpgqubzmapc^@!nhf57dhbyb*+("

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # My apps (앱)
    "movies",
    "accounts",
    "communities",
    # Third-party apps (타사 앱)
    "rest_framework",  # Django REST framework
    "rest_framework.authtoken",  # 인증 기능을 위해 rest_framework.authtoken 등록
    "dj_rest_auth",  # dj_rest_auth 라이브러리 추가
    # 'anymail',  # Mailgun을 비롯한 여러 이메일 서비스 제공업체들과의 통합을 위한 Django용 추가 기능 패키지
    "corsheaders",
    # dj-rest-auth[with_social] 설치 관련 앱
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# dj-rest-auth[with_social] 설치 관련
SITE_ID = 1

# 인증 및 권한에 대한 전역 설정
# Django REST framework settings (DRF의 동작을 구성하기 위한 DRF 설정(REST API 기본 보안 정책)) -  보안을 관리하는 데 매우 중요
# DRF Permissions: https://www.django-rest-framework.org/api-guide/permissions/
# DRF Authentication: https://www.django-rest-framework.org/api-guide/authentication/
REST_FRAMEWORK = {
    # Authentication
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    # permission
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    # 'allauth.account.middleware.AccountMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# CORS_ALLOWED_ORIGINS = [
#     "http://127.0.0.1:8000",
#     "http://localhost:5173",
# ]
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "movie_pjt.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "movie_pjt.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"  # 한국어로 설정

TIME_ZONE = "Asia/Seoul"  # 한국 시간대로 설정

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# API 키 보호
import environ
import os  # os 모듈은 운영 체제와 상호 작용할 때 사용되며, 환경 변수에 접근하는 기능을 제공

# from dotenv import load_dotenv  # .env 파일에서 환경변수를 읽어서 파이썬의 환경변수로 로딩하기

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, True)
)

# Set the project base directory
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Take environment variables from .env file
environ.Env.read_env(env_file=os.path.join(BASE_DIR, ".env"))

# os.environ.get('TMDB_ACCESS_TOKEN')
TMDB_ACCESS_TOKEN = env("TMDB_ACCESS_TOKEN")

DEBUG = env("DEBUG")


# Media files (프로필 사진)
MEDIA_ROOT = BASE_DIR / "media"  # 미디어 파일들이 위치하는 디렉토리의 절대 경로
MEDIA_URL = "media/"  # MEDIA_ROOT에서 제공되는 미디어 파일에 대한 주소를 생성

AUTH_USER_MODEL = "accounts.User"  # auth_user, accounts_user 충돌 방지
